name: Test dev3000 on All Platforms

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test-windows:
    name: Windows Latest
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - run: pnpm install
      - run: pnpm install -g dev3000
      - name: Test dev3000 startup
        shell: pwsh
        run: |
          Start-Process -FilePath "d3k" -ArgumentList "--servers-only" -RedirectStandardOutput "d3k_output.log" -RedirectStandardError "d3k_error.log" -NoNewWindow -PassThru | Out-File -FilePath "d3k_pid.txt"
          $devPid = Get-Content "d3k_pid.txt" | Select-Object -First 1
          $devPid = [int]($devPid -split '\s+')[6]  # Extract PID from process info
          Write-Output "d3k PID: $devPid"
          Start-Sleep -Seconds 30

          try {
            $response = Invoke-WebRequest -Uri "http://localhost:3684/logs" -Method GET -TimeoutSec 5 -ErrorAction Stop
            Write-Output "✅ MCP server started successfully on Windows"
          } catch {
            Write-Output "❌ MCP server failed to start"
            if (Test-Path "d3k_output.log") { Get-Content "d3k_output.log" }
            if (Test-Path "d3k_error.log") { Get-Content "d3k_error.log" }
            exit 1
          }

          Write-Output "--- d3k OUTPUT ---"
          if (Test-Path "d3k_output.log") { Get-Content "d3k_output.log" }
          Write-Output "--- d3k ERROR ---"
          if (Test-Path "d3k_error.log") { Get-Content "d3k_error.log" }
          Write-Output "--- END OUTPUT ---"

          Stop-Process -Id $devPid -Force -ErrorAction SilentlyContinue
      - name: Check logs
        if: always()
        shell: pwsh
        run: |
          $logFound = $false
          $tempDir = $env:TEMP
          $logPattern = "${tempDir}\dev3000-logs\dev3000-*.log"
          $latestLog = Get-ChildItem -Path $logPattern -ErrorAction SilentlyContinue | Sort-Object LastWriteTime -Descending | Select-Object -First 1
          if ($latestLog) {
            Write-Output "Found log file: $($latestLog.FullName)"
            Write-Output "--- LOG CONTENTS ---"
            Get-Content $latestLog.FullName
            Write-Output "--- END LOG ---"
            $logFound = $true
          }
          if (-not $logFound) {
            Write-Output "No dev3000 log file found"
            Write-Output "Searching for dev3000 log directories..."
            Get-ChildItem -Path $env:TEMP -Recurse -Directory -Name "*dev3000*" -ErrorAction SilentlyContinue
          }

  test-unix:
    name: ${{ matrix.platform }}
    runs-on: ${{ matrix.runner }}
    container: ${{ matrix.container }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "Ubuntu Latest"
            runner: ubuntu-latest
          - platform: "Alpine Linux"
            runner: ubuntu-latest
            container: alpine:latest
            deps: "apk update && apk add --no-cache nodejs npm git bash curl lsof"
          - platform: "CentOS Stream 9"
            runner: ubuntu-latest
            container: quay.io/centos/centos:stream9
            deps: "dnf update -y && dnf install -y git lsof curl --allowerasing && curl -fsSL https://rpm.nodesource.com/setup_20.x | bash - && dnf install -y nodejs"

    steps:
      - name: Install system dependencies
        if: matrix.deps
        run: ${{ matrix.deps }}
      - uses: actions/checkout@v4
      - name: Set up Node.js
        if: "!matrix.container"
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - run: pnpm install
      - run: pnpm install -g dev3000
      - name: Test dev3000 startup
        run: |
          d3k --servers-only > d3k_output.log 2>&1 &
          DEV_PID=$!
          echo "d3k PID: $DEV_PID"
          sleep 30
          
          if curl -f -s http://localhost:3684/logs > /dev/null 2>&1 || wget -q --spider http://localhost:3684/logs 2>/dev/null; then
            echo "✅ MCP server started successfully on ${{ matrix.platform }}"
          else
            echo "❌ MCP server failed to start"
            cat d3k_output.log
            exit 1
          fi
          
          echo "--- d3k OUTPUT ---"
          cat d3k_output.log
          echo "--- END OUTPUT ---"
          
          kill $DEV_PID
          wait $DEV_PID || true
      - name: Check logs
        if: always()
        run: |
          logFound=false
          for logDir in "/tmp/dev3000-logs" "/var/log/dev3000"; do
            logPattern="${logDir}/dev3000-*.log"
            if ls $logPattern &> /dev/null; then
              latestLog=$(ls -t $logPattern | head -n 1)
              echo "Found log file: $latestLog"
              echo "--- LOG CONTENTS ---"
              cat "$latestLog"
              echo "--- END LOG ---"
              logFound=true
              break
            fi
          done
          if [ "$logFound" = false ]; then
            echo "No dev3000 log file found"
            find /tmp /var/log -name "*dev3000*" -type d 2>/dev/null || echo "No dev3000 log directories found"
          fi

  test-macos:
    name: macOS Latest
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - run: pnpm install
      - run: pnpm install -g dev3000
      - name: Test dev3000 startup
        run: |
          d3k --servers-only > d3k_output.log 2>&1 &
          DEV_PID=$!
          echo "d3k PID: $DEV_PID"
          sleep 30

          if curl -f -s http://localhost:3684/logs > /dev/null 2>&1; then
            echo "✅ MCP server started successfully on macOS"
          else
            echo "❌ MCP server failed to start"
            cat d3k_output.log
            exit 1
          fi

          echo "--- d3k OUTPUT ---"
          cat d3k_output.log
          echo "--- END OUTPUT ---"

          kill $DEV_PID
          wait $DEV_PID || true
      - name: Check logs
        if: always()
        run: |
          logFound=false
          # Check common log locations and macOS-specific temp directories
          for logDir in "/tmp/dev3000-logs" "/var/log/dev3000" "$TMPDIR/dev3000-logs" "/var/folders/*/T/dev3000-logs"; do
            logPattern="${logDir}/dev3000-*.log"
            if ls $logPattern &> /dev/null; then
              latestLog=$(ls -t $logPattern | head -n 1)
              echo "Found log file: $latestLog"
              echo "--- LOG CONTENTS ---"
              cat "$latestLog"
              echo "--- END LOG ---"
              logFound=true
              break
            fi
          done
          if [ "$logFound" = false ]; then
            echo "No dev3000 log file found"
            echo "Searching for dev3000 log directories..."
            find /tmp /var/log /var/folders -name "*dev3000*" -type d 2>/dev/null || echo "No dev3000 log directories found"
          fi
